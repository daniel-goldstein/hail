{% macro cluster(name, dns_name)  %}
        - name: {{ name }}
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: {{ name }}
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: {{ dns_name }}
                      port_value: 443
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
              common_tls_context:
                tls_certificates:
                - certificate_chain:
                    filename: /ssl-config/gateway-cert.pem
                  private_key:
                    filename: /ssl-config/gateway-key.pem
                validation_context:
                  trusted_ca:
                    filename: /ssl-config/gateway-outgoing.pem
{% endmacro %}

apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-envoy-config
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 80
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                  - name: revoke
                    domains:
                      - "bogus-for-revoke.*"
                    routes: []
                  - name: default_http
                    domains: ["*"]
                    routes:
                      - match:
                          prefix: "/.well-known/acme-challenge"
                        route:
                          timeout: 0s
                          cluster: letsencrypt
                      - match:
                          prefix: "/"
                        redirect:
                          https_redirect: true
              http_filters:
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 443
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: ingress_http
              upgrade_configs:
                - upgrade_type: websocket
              route_config:
                name: local_route
                virtual_hosts:
{% for service in subdomains %}
{% if service == 'ukbb-rg' %}
                  - name: ukbb
                    domains:
                      - ukbb-rg.{{ global.domain }}
                    typed_per_filter_config:
                      envoy.filters.http.ext_authz:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                        disabled: true
                    routes:
                      - match:
                          prefix: "/rg_browser"
                        route:
                          timeout: 0s
                          cluster: ukbb-rg-browser
                      - match:
                          prefix: "/"
                        route:
                          timeout: 0s
                          cluster: ukbb-rg-static
{% else %}
                  - name: {{ service }}
                    domains:
                      - {{ service }}.{{ global.domain }}
{% if service == "www" %}
                      - {{ global.domain }}
{% endif %}
                    typed_per_filter_config:
                      envoy.filters.http.ext_authz:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                        disabled: true
                    routes:
                      - match:
                          prefix: "/"
                        route:
                          timeout: 0s
                          cluster: {{ service }}
{% endif %}
{% endfor %}
              http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    http_service:
                      server_uri:
                        uri: https://auth:443
                        cluster: auth
                        timeout: 0.25s
                      path_prefix: /api/v1alpha/verify_dev_credentials?url=
                      authorization_request:
                        allowed_headers:
                          patterns:
                            exact: "Cookie"
                            ignore_case: true
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                - certificate_chain:
                    filename: /etc/letsencrypt/fullchain.pem
                  private_key:
                    filename: /etc/letsencrypt/privkey.pem
      clusters:
        - name: letsencrypt
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: letsencrypt
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: letsencrypt.default.svc.cluster.local
                      port_value: 80
{% for service in subdomains %}
{% if service == 'ukbb-rg' %}
{{ cluster('ukbb-rg-browser', 'ukbb-rg-browser.ukbb-rg.svc.cluster.local') }}
{{ cluster('ukbb-rg-static', 'ukbb-rg-static.ukbb-rg.svc.cluster.local') }}
{% else %}
{{ cluster(service, service + '.default.svc.cluster.local') }}
{% endif %}
{% endfor %}
    admin:
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 8001
    layered_runtime:
      layers:
      - name: static_layer_0
        static_layer:
          envoy:
            resource_limits:
              listener:
                example_listener_name:
                  connection_limit: 10000
